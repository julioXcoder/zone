// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  published Boolean
}

model Staff {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  password         String
  firstName        String
  lastName         String
  roleId           String            @db.ObjectId
  role             Role              @relation(fields: [roleId], references: [id])
  subjectInstances SubjectInstance[]
}

model Student {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  password     String
  firstName    String
  lastName     String
  yearId       String            @db.ObjectId
  year         Year              @relation(fields: [yearId], references: [id])
  role         String            @default("STUDENT")
  studentYears StudentYear[]
  positions    StudentPosition[]
}

model Role {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  RoleName @unique
  staff Staff[]
}

model Position {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  name     PositionName      @unique
  students StudentPosition[]
}

model StudentPosition {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId  String   @db.ObjectId
  positionId String   @db.ObjectId
  student    Student  @relation(fields: [studentId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])
}

enum RoleName {
  EXAMINATION_OFFICER
  LECTURE
}

enum PositionName {
  STUDENT_PRESIDENT
  CLASS_REPRESENTATIVE
}

model AcademicYear {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  year      String     @unique
  semesters Semester[]
}

model College {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  departments Department[]
}

model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  collegeId String   @db.ObjectId
  college   College  @relation(fields: [collegeId], references: [id])
  courses   Course[]
}

model Course {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  departmentId String     @db.ObjectId
  department   Department @relation(fields: [departmentId], references: [id])
  levels       Level[]
}

model Level {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String // This could be "Diploma", "Bachelor", "Master", etc.
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  years    Year[]
}

model Year {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String // This could be "First Year", "Second Year", etc.
  levelId      String        @db.ObjectId
  level        Level         @relation(fields: [levelId], references: [id])
  students     Student[]
  studentYears StudentYear[]
  subjects     Subject[]
}

model CAComponent {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  marks     Int
  CAId      String     @db.ObjectId
  CA        CA         @relation(fields: [CAId], references: [id])
  CAResults CAResult[]
}

model FinalResult {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  marks             Int?
  studentYearId     String          @db.ObjectId
  studentYear       StudentYear     @relation(fields: [studentYearId], references: [id])
  subjectInstanceId String          @db.ObjectId
  subjectInstance   SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
}

model Semester {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  academicYearId   String            @db.ObjectId
  createdAt        DateTime          @default(now())
  academicYear     AcademicYear      @relation(fields: [academicYearId], references: [id])
  subjectInstances SubjectInstance[]
}

model CAResult {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  marks             Int?
  studentYearId     String          @db.ObjectId
  studentYear       StudentYear     @relation(fields: [studentYearId], references: [id])
  componentId       String          @db.ObjectId
  component         CAComponent     @relation(fields: [componentId], references: [id])
  subjectInstanceId String          @db.ObjectId
  subjectInstance   SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
}

model CA {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  subjectInstanceId String          @db.ObjectId
  subjectInstance   SubjectInstance @relation(fields: [subjectInstanceId], references: [id])
  components        CAComponent[]
}

model Subject {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  yearId           String            @db.ObjectId
  year             Year              @relation(fields: [yearId], references: [id])
  subjectInstances SubjectInstance[]
}

model SubjectInstance {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  subjectId    String        @db.ObjectId
  subject      Subject       @relation(fields: [subjectId], references: [id])
  semesterId   String        @db.ObjectId
  semester     Semester      @relation(fields: [semesterId], references: [id])
  lecturerId   String        @db.ObjectId
  lecturer     Staff         @relation(fields: [lecturerId], references: [id])
  CAResults    CAResult[]
  finalResults FinalResult[]
  CAs          CA[]

  @@unique([subjectId, semesterId])
}

model StudentYear {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String        @db.ObjectId
  student      Student       @relation(fields: [studentId], references: [id])
  yearId       String        @db.ObjectId
  year         Year          @relation(fields: [yearId], references: [id])
  CAResults    CAResult[]
  finalResults FinalResult[]

  @@unique([studentId, yearId])
}
